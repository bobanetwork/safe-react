name: Deploy to Boba

# Run on pushes to main or PRs
on:
  # # Pull request hook without any config. Launches for every pull request
  # pull_request:
  # # Launches for pushes to main or dev
  # push:
  #   branches:
  #     - main
  #     - dev
  # # Launches build when release is published
  release:
    types: [published]

env:
  # REPO_NAME_ALPHANUMERIC: safereact
  # STAGING_BUCKET_NAME: ${{ secrets.STAGING_BUCKET_NAME }}
  # REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN_MAINNET }}
  # REACT_APP_ETHERSCAN_API_KEY: ${{ secrets.REACT_APP_ETHERSCAN_API_KEY }}
  # REACT_APP_ETHGASSTATION_API_KEY: ${{ secrets.REACT_APP_ETHGASSTATION_API_KEY }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  REACT_APP_DEFAULT_CHAIN_ID: ${{ secrets.REACT_APP_DEFAULT_CHAIN_ID }}
  REACT_APP_ENV: ${{ secrets.REACT_APP_ENV }}
  REACT_APP_GATEWAY_URL: ${{ secrets.REACT_APP_GATEWAY_URL }}
  REACT_APP_GOOGLE_TAG_MANAGER_ID: ${{ secrets.REACT_APP_GOOGLE_TAG_MANAGER_ID }}
  REACT_APP_GOOGLE_TAG_MANAGER_LIVE_AUTH: ${{ secrets.REACT_APP_GOOGLE_TAG_MANAGER_LIVE_AUTH }}
  REACT_APP_INFURA_TOKEN: ${{ secrets.REACT_APP_INFURA_TOKEN }}
  REACT_APP_IPFS_GATEWAY: ${{ secrets.REACT_APP_IPFS_GATEWAY }}
  REACT_APP_NETWORK: ${{ secrets.REACT_APP_NETWORK }}
  REACT_APP_SAFE_APPS_RPC_INFURA_TOKEN: ${{ secrets.REACT_APP_SAFE_APPS_RPC_INFURA_TOKEN }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Remove broken apt repos [Ubuntu]
        if: ${{ matrix.os }} == 'ubuntu-latest'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # - uses: actions/cache@v2
      #   with:
      #     path: '**/node_modules'
      #     key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - run: |
          sudo apt-get update
          sudo apt-get -y install python3-pip python3-dev libusb-1.0-0-dev libudev-dev
          pip install awscli --upgrade --user
          # Due to some dependencies yarn may randomly throw an error about invalid cache
          # This approach is taken from https://github.com/yarnpkg/yarn/issues/7212#issuecomment-506155894 to fix the issue
          # Another approach is to install with flag --network-concurrency 1, but this will make the installation pretty slow (default value is 8)
          # mkdir .yarncache
          # yarn global add cross-env@7.0.3 --ignore-scripts
          # yarn global add patch-package@6.4.7 --ignore-scripts
          # yarn global add typechain@5.1.2 --ignore-scripts
          # yarn global add @typechain/web3-v1@3.0.0 --ignore-scripts
          # yarn global add @rescripts/cli@0.0.16 --ignore-scripts
          # yarn install --cache-folder ./.yarncache --frozen-lockfile
          # rm -rf .yarncache
          # yarn cache clean

      - name: Build app
        run: yarn build
        env:
          REACT_APP_APP_VERSION: ${{ github.event.release.tag_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Script to deploy to the dev environment
      - name: 'Deploy to S3: prod'
        working-directory: ./build
        run: aws s3 sync . s3://${{ env.S3_BUCKET }} --delete && aws cloudfront create-invalidation --distribution-id {{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
